#!/usr/bin/env perl
use strict;
use warnings;
use 5.014;

our $VERSION = 0.042;

use Carp 'croak';
use POSIX qw(mktime strftime);

my $git = '/usr/bin/git';

sub _git { not system $git, @_ }

my $version = qx[$git 'version'];

++$|;  # autoflush: want errors in logical order

my ($policy, $timestamp, $author, $no_commit);
while (@ARGV and $ARGV[0] =~ /^\-\-/) {
  my $opt = shift @ARGV;
  if ($opt =~ /^\-\-date(?:\=|$)/) {
    $opt = shift(@ARGV) // '(missing)' unless $opt =~ s/^\-\-date\=//;
    $policy = 'provided';
    $timestamp = _parse_date($opt) or die "Bad date ($opt)\n";
  }
  elsif ($opt =~ /^\-\-date-from-author$/) {
    $policy = 'source-author';
  }
  elsif ($opt =~ /^\-\-date-from-committer$/) {
    $policy = 'source-committer';
  }
  elsif ($opt =~ /^\-\-date-like-commit(?:\=|$)/) {
    $opt = shift(@ARGV) // '(missing)'
      unless $opt =~ s/^\-\-date-like-commit\=//;
    $policy = 'provided';
    $timestamp = _stat_commit($opt) or die "Bad file ($opt)\n";
  }
  elsif ($opt =~ /^\-\-date-like-file(?:\=|$)/) {
    $opt = shift(@ARGV) // '(missing)'
      unless $opt =~ s/^\-\-date-like-file\=//;
    $policy = 'provided';
    $timestamp = _stat_file($opt) or die "Bad file ($opt)\n";
  }
  elsif ($opt =~ /^\-\-author(?:\=|$)/) {
    $opt = shift(@ARGV) // '(missing)'
      unless $opt =~ s/^\-\-author\=//;
    $author = $opt;
  }
  elsif ($opt =~ /^\-\-no-commit$/) {
    ++$no_commit;
  }
  else {
    die "Unrecognised option ($opt)\n";
  }
}
$timestamp .= strftime ' %z', localtime $timestamp
  if $timestamp and $timestamp !~ /\s/;  # default from local

my $that_dest = pop // die "Need to reference the source end-point\n";
my $that_base = pop;
my $single;
unless (defined $that_base) {
  $that_base = "$that_dest^";  # might not exist
  $single = 1;
}
die "Too many arguments\n" if @ARGV;

print STDERR "begin checking of pre-conditions\n";
_git 'symbolic-ref', 'HEAD' or die "Not on a branch\n";
_git diff => '--quiet', '--ignore-submodules', 'HEAD'
  or die "Not in a clean state\n";

_git log => '-1', '--oneline', $that_dest, '--'
  or die "Failed to read git log of source end-point ($that_dest)\n";
my @queue;
eval {
  _git log => '-1', '--oneline', $that_base, '--';
  open my $fh, '-|', $git, 'rev-list',
      '--topo-order', "^$that_base", $that_dest, '--'
    or die "Failed to produce list of desired commits: $!\n";
  while (defined(my $that = <$fh>)) {
    chomp $that;
    unshift @queue, $that;  # reverse order
    last if $single;
  }
  close $fh;
}
or eval {
  @queue = ();
  open my $fh, '-|', $git, 'rev-list', $that_dest, '--'
    or die "Failed to produce list of target commits: $!\n";
  while (defined(my $that = <$fh>)) {
    chomp $that;
    push @queue, $that;
  }
  close $fh;
  die "Not a parent-less commit ($that_dest)\n" unless @queue == 1;
}
or die "Failed to list source commits ($that_base)\n[$@]\n";

my $this = qx[$git rev-parse --verify --quiet HEAD];
chomp $this;
print STDERR "end checking of pre-conditions (satisfied)\n";

print STDERR "begin copying\n";
my $qty = 0;

for my $that (@queue) {
  my @options;
  push @options, '--author', $author if defined $author;
  if (($policy //= 'source-both') =~ /^source-/) {
    my $timing = $policy eq 'source-author'
      ? qx[$git log -1 --pretty='%at:%ad' $that]
      : qx[$git log -1 --pretty='%ct:%cd' $that];
    chomp $timing;

    @ENV{qw(GIT_COMMITTER_DATE)} = $timestamp = _timestamp($timing);
    push @options, '--date', $timestamp if $policy eq 'source-committer';
  }
  else {
    $ENV{GIT_COMMITTER_DATE} = $timestamp;
    push @options, '--date', $timestamp;
  }

  _git reset => '--hard', $that
      and _git reset => '--soft', $this
      and _git add => '--update'
    or die "Failed step ($that)\n";

  last if $no_commit;

  _git commit => '--allow-empty', '--no-verify', '-C', $that, @options;
  $this = qx[$git rev-parse --verify --quiet HEAD];
  chomp $this;

  die "Failed patching $this to $that\n"
    unless _git diff => '--quiet', '--ignore-submodules', $this, $that;
  ++$qty;
}

print STDERR "end copying (committed: $qty)\n";

sub _parse_date {
  my $date = shift // 'MISSING';
  return $1 if $date =~ /^(\d{9,} (?:\+|\-)\d{4})$/;
  return $1 if $date =~ /^(\d{9,})\b/;
  return undef
    unless $date =~ /^(\d{4})-(\d\d)-(\d\d)(?: |T)(\d\d):(\d\d)(?::(\d\d))?$/;
  return mktime($6 // 0, $5, $4, $3, $2 - 1, $1 - 1900);
}

sub _stat_commit {
  my $commit = shift // 'MISSING';
  my $timing = qx[$git log -1 --pretty=%at:%ad $commit];
  chomp $timing;
  return _timestamp($timing);
}

sub _stat_file {
  my $filename = shift // 'MISSING';
  return(-f $filename ? (stat $filename)[9] : undef);
}

sub _timestamp {
  my ($timing) = @_;
  my $timestamp = $timing =~ /^(\d+):/ ? $1 : croak "Bad timestamp ($timing)";
  my $offset = $timing =~ / ((?:\+|\-)\d+)$/ ? $1 : '';
  return "$timestamp $offset";
}

sub _zone {  # currently unused
  my $offset = shift // '+0000';
  my $sign = ($offset =~ s/^-//)  ? '+'
           : ($offset =~ s/^\+//) ? '-' : '';
  return sprintf 'Etc/GMT%s%u', $sign, int($offset / 100 + 0.1);
}

__END__
=head2 NAME

git-transplant - Copy commits to current branch replicating file state

=head2 SYNOPSIS

  git transplant [<options>] <end-point>
  git transplant [<options>] <base> <end-point>

=head2 DESCRIPTION

In the first form of invocation, with a single argument, that single commit is
copied to your current branch.  No merge is required, and the resulting state
(of files) on your branch is exactly the same as it was after the original
commit (C<end-point>).

In the second form of invocation, with two arguments, each commit in the range
C<base> (exclusive) to C<end-point> (inclusive) is copied in sequence to your
current branch.

To see a log of the commits to be copied, you can preview with

  git log --topo-order --reverse --oneline <base>..<end-point>

By default, the author date and committer date are each preserved from the
original commit.  If a date option is used, the author date and committer date
are set to the same date: the referenced date.

Since copies have new commit hashes, this constitutes rewriting history (even if
the content and metadata are identical) and so should only be done on
not-yet-published branches or where there is consensus that reference breakage
is justified.

=head2 EXAMPLES

  git transplant a2aa6ee f860d8f
  git transplant --date-from-author a2aa6ee f860d8f
  git transplant --date-like-file=Makefile f860d8f
  git transplant --no-commit stash@{4}

=head2 OPTIONS

=head3 --author=<author string>

  git transplant --author='Nic Sandfield <nic@example.com>' a2aa6ee f860d8f
  git transplant --author=Nic a2aa6ee f860d8f

Specify the author.  The full form is a string consisting of 'name <email>'.
The short form is a string to be matched against existing commits.  In pattern
matching, the first match found will be used.

=head3 --date=<date>

  git transplant --date='2001-01-01 00:00:01' f860d8f
  git transplant --date=978307201 f860d8f
  git transplant --date='978307201 +0100' f860d8f

Use the specified date.  Format can be ISO, epoch seconds, or internal (epoch +
offset).  Intended for single-commit copies.

=head3 --date-from-author

  git transplant --date-from-author a2aa6ee f860d8f

Use the author date of each source commit.

=head3 --date-from-committer

  git transplant --date-from-committer a2aa6ee f860d8f

Use the committer date of each source commit.

=head3 --date-like-commit=<commit object>

  git transplant --date-like-commit=bb30adc f860d8f

Use the author date of the referenced commit.  Works with a commit hash, branch,
tag, stash, etc.  Intended for single-commit copies.

=head3 --date-like-file=<file>

  git transplant --date-like-file=Makefile f860d8f

Use the modification time of the referenced file.  Intended for single-commit
copies.

=head3 --no-commit

  git transplant --no-commit f860d8f

Copies the file content from the source commit, but does not make a new commit.
Only for single-commit copies; if a range is specified, only the first commit
will be copied.

=head2 NOTES

Each commit is copied as (a snapshot of) state.  So whatever files were present
at the end of the original commit, those files will be present at the end of the
new commit; files may appear as added or deleted even if those changes were not
introduced by the original commit itself (but rather one of its ancestors).

This distinction means transplant is quite specialised and distinct from
mainstream git usage.  Standard tools such as C<rebase>, C<cherry-pick>, and
C<stash apply> are focused on respecting recent history; they create a patch by
comparing the original commit with its parent(s), and a patch representing the
current branch, and then merge the two together.  Instead C<transplant>
disregards recent history and copies the resulting files from the original
commit, not the changes made to those files.

The main use cases are (a) tidying up a feature branch, (b) repairing mistakes
on a branch, (c) amending the timestamps along a branch, and (d) examining the
files in old branches & stashes (avoiding merge headaches).

Examples of suitable use include:
* You want to erase one or more commits from history while preserving the
  resulting state of subsequent commits (in contrast to a rebase which would
  preserve effective changes but usually results in a different final state).
* You might want to graft a 'downstream' tree onto an 'upstream' tree in such a
  way that the earlier commits are preserved in history but their files do not
  prevail into the 'downstream' state.
* You may have used the wrong author email address.
* You want to correct mistakes in the datetime attribution.

Consider the chain of commits A..D below.

  A---B---C---D master

From this point, the result of:

  git checkout -b pruned A; git transplant B D

would be:

    C'--D' pruned
   /
  A---B---C---D master

This could be very useful if B accidentally introduced a secret file and C
deleted it.  However, if C did not delete it then the secret file prevails into
C and in that case the branch 'pruned' is not a fix.  (As ever with history
rewriting, the commit messages could become confusing, for instance if the
commit message in C mentions removing the problem file, but no removal is
visible in C'.  In this kind of operation it often pays to amend the commit
message at the same time.)

One advantage this tool has is it is unlikely to encounter problems, in contrast
to patch-based tools like rebase and cherry-pick which can get mired in merge
conflicts and can fail entirely.  (The comparison is moot, however, since each
side has a different goal.)

There is a common usage pattern of 'build a chain of commits, each having the
correct content' and then 'transplant the chain, giving each the correct
metadata'.

For example, consider the following sequence when a chain of commits is
discovered to have a recurring problem, such as inclusion of a private file.

  git tag broken  # mark current branch for future reference
  git reset --hard afc5c58  # move branch back to last 'good' commit
  git cherry-pick --no-commit 773331a  # copy commit using rebase/cherry-pick/transplant
  ...  # fix problems
  git commit -C 499f61c  # reuse original message and metadata
  ...  # repeat from cherry-pick if more than one broken commit
  git tag interim
  git reset --hard afc5c58  # back to last 'good' commit
  git transplant --date-from-author interim

In the simple case of the author being wrong (eg the wrong email address), git
transplant can fix the chain in a single action via the C<--author> option.

C<git transplant> can graft an entire commit chain onto the current branch, but
this needs to be done in two steps; first copy the initial (root) commit
individually, then copy the chain from there to the final commit.

  git checkout --orphan new
  git rm --cached -rf .
  git commit --allow-empty -mInit
  git transplant 567f4ba  # first copy root commit individually
  git transplant 567f4ba master  # then copy remainder of master branch

=head2 SUPPORT

Raise any issues discovered at the source repo:

  https://github.com/niczero/git-transplant/issues

This might work on all flavours of linux, but not with ancient versions of git.
Pull requests are welcome, especially if they help with portability or
internationalisation.

=head2 PRE-CONDITIONS

The working directory needs to be on a branch (ie not in detached head state)
and in a clean state (ie without any pending changes).

The end-point commit needs to be reachable from the base commit (but not
necessarily from the current branch).

=head2 ERRORS AND DIAGNOSTICS

A fair amount of debug data, of varying degrees of usefulness, are spat to
STDERR, so you might want to tee that into a file.

  git transplant a b | tee /tmp/copy.log

An error saying "Failed step (<that>)" means it failed when using git-reset to
mimic the resulting state of commit <that>.

An error saying "Failed patching <this> to <that>" means there was a failure
identified when comparing desired source commit <that> to latest attempt commit
<this>.  You can then use git-diff to compare those two commits.

=head2 COPYRIGHT AND LICENCE

Copyright (c) 2017--2018 Nic Sandfield.  All rights reserved.

This program is free software, you can redistribute it and/or modify it under
the terms of the MIT Licence.
